<?xml version="1.0" encoding="utf-8"?>

<!-- 
Copyright (C) 2009 Philipp Heim and Timo Stegemann (email to: heim.philipp@googlemail.com)

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program; if not, see <http://www.gnu.org/licenses/>.	
-->
	
<ext:MyPanel 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:flexlib="http://code.google.com/p/flexlib/" 
	xmlns:ext="extenders.*"
	xmlns:nimer="com.mikenimer.components.datagrid.*"
	xmlns:comp="com.adobe.flex.extras.controls.*"
	xmlns:components="com.hillelcoren.components.*"
	
	creationComplete="setup()"
	filters="{calcFilters(data.hasChanged)}" 
	styleName="{getStyleName(data.facet.isResultSet)}"
	title="{data.cLabel}" width="280" height="205" toolTip="{data.elementClass.label}"
	layout="absolute" showControls="true" enableResize="true" listItem="{data as ListItem}"  verticalScrollPolicy="off" horizontalScrollPolicy="off">
	<!--
	</ext:MyPanel>.hasChanged)}" 
	styleName="{getStyleName(data.facet.isResultSet)}"
	{data.chain.property.type}={data.chain.property.value}-->
	
	
	<mx:Style>
		.columnVBox{
			horizontalAlign: right;
			background-color: #000000;
		}
	</mx:Style>
		
	<mx:VBox id="myVBox" verticalGap="0" height="100%" width="100%">
		<!--columns="{getColumns((data as ListItem).selectedDataTypeProperties.length)}"-->
		<nimer:CustomRowColorDataGrid id="dg" headerRelease="headerReleasedHandler(event)" borderStyle="none" variableRowHeight="true"  rowColorFunction="selectTypeColor"  dataProvider="{data.visibleElements}" width="100%" height="100%" headerStyleName="myButtonStyle2" styleName="myButtonStyle3big" mouseDown="event.stopPropagation()" change="{data.selectedElementsChanged(dg.selectedItem as Element); dg.selectedIndex = -1; handleSearchChange();}"> 
		</nimer:CustomRowColorDataGrid>
		<!-- resize='{pageNav.width = this.width-6; myHBox.percentWidth= 100; myVBox.percentWidth = 100; Logger.debug("pageNav.width", pageNav.width); Logger.debug("nav.length", pageNav.numChildren);}' -->
		<!-- <mx:ToggleButtonBar id="pageNav" itemClick="navigatePage(event)" width="{this.width - 6}" dataProvider="{data.nav}" height="{getHeight(data.hasChanged)}" buttonStyleName="myToggleButtonStyle"></mx:ToggleButtonBar> -->
		
		<mx:HBox id="myHBox" width="100%" paddingBottom="2" paddingTop="3">
			<!-- itemRenderer="mx.controls.Label" -->
			
			<mx:Label text="Filter: "/>
			<!-- <mx:HSlider id="sllider" minimum="1000" maximum="5000" labels="{ ['1000','5000' ] }" showDataTip="false" tickInterval="500" snapInterval="500" change="handleSliderChange()"/> -->
			<!-- <mx:Spacer width="100%"/>		-->
			<!-- <mx:CheckBox id="checkbox" label="Enable faster searching" change="handleEnableFasterSearchingChange()"/> -->
			<!-- <mx:Spacer width="100%"/> -->
			<components:PromptTextInput id="textInput" prompt="Filter List" change="handleSearchChange()" width="140"/>
			<mx:Label text="({data.visibleElements.length} of {data.numberOfValids})"/>
			
			<!-- add columns -->
			<!-- <mx:ComboBox id="columnsdropdown" prompt="- Show Column -" height="18" styleName="myToggleButtonStyle" change="addDataGridColumn(columnsdropdown.selectedItem as Property); columnsdropdown.selectedItem = null;" width="80%" dataProvider="{data.dataTypeProperties}" >
				<mx:itemRenderer>  
					<mx:Component>  
 						<mx:Label text="{data.label}" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" />  
					</mx:Component>  
				</mx:itemRenderer> 
			</mx:ComboBox> --> 
		</mx:HBox>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			// ({data.objectClass.numberOfObjectInstances})
			import extenders.HeaderFactory;
			import extenders.ItemRendererFactory;
			import extenders.MyDataGridItemRenderer;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.events.TimerEvent;
			import flash.utils.Timer;
			import graphElements.Element;
			import mx.controls.Button;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.Label;
			import mx.core.Application;
			import mx.collections.ArrayCollection;
			import mx.controls.DataGrid;
			import mx.core.IFactory;
			import mx.events.DataGridEvent;
			import mx.events.ItemClickEvent;
			import org.flashdevelop.utils.FlashConnect;
			//import org.osflash.thunderbolt.Logger;
			import mx.binding.utils.BindingUtils;
			import com.hillelcoren.fasterSearching.interfaces.ISearchable;
			import com.hillelcoren.fasterSearching.utils.SearchUtils;
			import com.hillelcoren.fasterSearching.utils.DataGenerator;
			import com.hillelcoren.fasterSearching.Person;
			
			/*private function getTip(_current:Object):String {
				return "Requirement Description:\n"+(_current as Element).description;
			}*/
			
			public function getHeight(_hasChanged:Boolean):Number {
				if (data.numberOfValids <= 0) {	//workaround
					return 18;
				}
				if (data.numberOfValids <= data.elementsPerPage) {
					return 0;
				}else {
					return 18;
				}
			}
			
			public function setup():void {
				//Logger.hide = true;
				//BindingUtils.bindSetter(updateStyleName, (data as ListItem).facet, "isResultSet");
				//pageNav.selectedIndex = data.facet.offset;
				//pageNav.numChildren
				data.selectedDataTypeProperties.addEventListener(Event.CHANGE, this.updateColumns);
				
				//trace("setup");
				var myTimer:Timer = new Timer(2000, 1);
				myTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.timerCompleteHandler);
				myTimer.start();
				
				SearchUtils.enableFasterSearch = true;	//fast search enabled
				data.visibleElements.filterFunction = filterFunction;
			}
			
			private function myLabelFunction(item:Object, column:DataGridColumn):String {
				//Logger.debug("prop.type", column.headerText);
				
				var prop:Property = (item as Element).getProperty(column.headerText);
				if (prop != null) {
					return prop.value as String;
				}else {
					return "error: "+column.headerText;
				}
				
				//return (item as Element).id;
				/*if ((item as Element).properties.hasOwnProperty(column.headerText)) {
					var prop:Property = (item as Element).properties[column.headerText];
					return prop.value as String;
				}else {
					return "error";
				}*/
            }
			
			private function updateColumns(event:Event):void {
				var cols:Array = new Array();
				//Logger.debug("updateColumns!!");
				
				var dgcS:DataGridColumn = new DataGridColumn("status");
				dgcS.headerRenderer = new HeaderFactory(null);
				dgcS.itemRenderer = new ItemRendererFactory("status");
				dgcS.headerText = "Status";
				dgcS.width = 10;
				//dgcS.width = 10;
				//dgcS.setWidth(10);
				//dgcS.explicitWidth = 10;
				//dgcS.minWidth = 10;
				//dgcS.sortCompareFunction = data.myCompareFunc;
				cols.push(dgcS);
				
				//FlashConnect.trace("updateColumns");
				if (data != null) {
					for each(var p:Property in data.selectedDataTypeProperties) {
						var dgc:DataGridColumn = new DataGridColumn();
						dgc.headerRenderer = new HeaderFactory(this.removeDataGridColumn);	//übergibt die closeClickHandler function für dieses Column
						dgc.labelFunction = myLabelFunction;
						//TODO: einbauen, dass es möglich ist mehrere values pro type und instanz zu haben!!
						//dgc.itemRenderer = new ItemRendererFactory(p.type);
						
						
						dgc.headerText = p.type;
						dgc.wordWrap = true;
						dgc.width = 50;
						dgc.minWidth = 20;
						cols.push(dgc);
					}
				}
				dg.columns = cols;
			}
			
			/**
			 * Add column to the dataGrid to show more properties
			 * @param	p
			 */
			private function addDataGridColumn(p:Property):void {
				//FlashConnect.trace("addDataGridColumn, " + p.type);
				data.selectDataTypeProperty(p);
				//FlashConnect.trace("updateColumns");
				//FlashConnect.trace("updateColumns");
            }
			
			/**
			 * Remove a column from the datagrid and thereby reduce the number of visible properties
			 * @param	dataField
			 */
			private function removeDataGridColumn(dataField:String):void {
				var prop:Property = null;
				for each(var p:Property in data.selectedDataTypeProperties) {
					if (p.type == dataField) {
						prop = p;
						data.deselectDataTypeProperty(prop);
						break;
					}
				}
				if (prop == null) {
					//Logger.error("column cannot be removed", dataField);
				}
			}
			
			/**
			 * is called whenever the user selects a new property to sort the datagrid.
			 * @param	evt
			 */
			private function headerReleasedHandler(evt:DataGridEvent):void {
				var column:DataGridColumn = DataGridColumn(evt.currentTarget.columns[evt.columnIndex]);
				
				/*
				 * Basically the following post shows one possible way of determining the current sort order of a data grid by grabbing the sortDescending property whenever a user presses on a data grid header.
				*/
                //if (column.dataField != "status") {//status kann intern geregelt werden, ohne Server-Kommunikation (vorerst auf jeden Fall)
					DataGrid(evt.currentTarget).callLater(onCallLater, [column]);	//just a workaround
				//}
				//evt.preventDefault();
            }
			
			/**
			 * 
			 * @param	column
			 */
            private function onCallLater(column:DataGridColumn):void {
				
				var field:String = column.headerText;
				var prop:Property = null;
				//workaround
				for each(var p:Property in data.selectedDataTypeProperties) {
					if (p.type == field) {
						prop = p;
						break;
					}
					FlashConnect.trace("field: "+field+", p.type: "+p.type+", "+column.headerText);
				}
				
				if (prop != null) {
					data.setSortCriteria(prop, column.sortDescending);	//prop, asc/desc
				}else {
					trace("ERROR in onCallLater");
					//Logger.error("in onCallLater");
					FlashConnect.trace("ERROR in onCallLater");
				}
				
				
				var t:String = column.dataField + " (sortDescending:" + column.sortDescending + ")";
				
				//FlashConnect.trace("handleHeaderReleased!");
				//Logger.debug("new sorting: ", t);
            }
			
			private function selectTypeColor(item:Object, color:uint):uint {
				//var status:String = (item as Element).status;
				if ((item as Element).isSelected){//status == "selected") {
					return data.highlightColor;
				}else if ((item as Element).isValid){//status == "valid") {
					return  uint("0xF5FFFA");
				}else if ((item as Element).isAvailable) {
					return  uint("0xFFFFFF");
				}else{
					return  uint("0xFDF5E6");
				}
				
				/*if ((item as Element).isSelected) {
					return data.highlightColor;
				}else if ((item as Element).isValid) {
					if ((item as Element).isNew) {
						return  uint("0xF5FFFA");
					}else {
						return  uint("0xFFFFFF");
					}
				}else {
					if ((item as Element).isNew) {
						return  uint("0xFDF5E6");
					}else {
						return  uint("0xDCDCDC");
					}
				}*/
				return color;
			}
			
			public function timerCompleteHandler(event:Event):void {
				if (!this.isPinned) {	//if the window is not allready pinned
					this.pinClickHandler(null);
				}
				//Logger.debug("pinned");
				//this.data.addRelationItem();
			}
			
			private function app(): Main {
				return Application.application as Main;
			}
			
			private function calcFilters(_hasChanged:Boolean): Array {
				var a:Array = new Array();
				var radius:int = 5;
				var alpha:Number = 1.0;
				for each(var color:uint in data.restrictingColors) {
					a.push(new GlowFilter(color, alpha, radius, radius, 15, 2));
				}
				return a;
			}
			
			private function navigatePage(event:ItemClickEvent):void{
				data.setPagingIndex(event.item.data);
				//data.refreshDataProvider(event.item.data);
				var lb:String = event.item.label.toString();
				if( lb.indexOf("<") > -1 || lb.indexOf(">") > -1 ){	//if either <<, <, > or >> has been clicked
					data.createNavBar(Math.ceil(data.numberOfValids/data.elementsPerPage),event.item.data);
					if( event.item.data == 0 ){
						//pageNav.selectedIndex = 0;
					}else{
						//pageNav.selectedIndex = 2;	//0: <<, 1: <, 2: number!
					}
					//pageNav.percentWidth
					
				}
				//Logger.debug(">>pageNav.widht", pageNav.width);
			}
			
			/*private function updateStyleName(_isRS:Boolean):void {
				if (_isRS) {
					this.styleName = "resultList";
				}else {
					this.styleName = "";
				}
			}*/
			
			private function getStyleName(_isRS:Boolean):String {
				if (_isRS) {
					return "resultList";
				}else {
					return "";
				}
			}
			
			private function handleSearchChange():void{
				//var start:Date = new Date();
				
				data.visibleElements.refresh();
				
				//var end:Date = new Date();
				//var searchTime:int = end.getTime() - start.getTime();
				
				//resultsLabel.text = "Search took " + searchTime + " msecs";		
			}
			
			private function filterFunction(item:Element ):Boolean{
				return (SearchUtils.isMatch( item, textInput.text ) && (item.isAvailable || item.isValid || item.isSelected));
			}
			
		]]>
	</mx:Script>				
</ext:MyPanel>